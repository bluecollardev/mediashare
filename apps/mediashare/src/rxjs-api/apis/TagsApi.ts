// tslint:disable
/**
 * Mediashare
 * Mediashare API
 *
 * The version of the OpenAPI document: 0.1.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, throwIfNullOrUndefined, encodeURI, OperationOpts, RawAjaxResponse } from '../runtime';
import { Tag } from '../models';

export interface TagControllerFindOneRequest {
  tagId: string;
}

export interface TagControllerRemoveRequest {
  tagId: string;
}

/**
 * no description
 */
export class TagsApi extends BaseAPI {
  /**
   */
  tagControllerFindAll(): Observable<Array<Tag>>;
  tagControllerFindAll(opts?: OperationOpts): Observable<RawAjaxResponse<Array<Tag>>>;
  tagControllerFindAll(opts?: OperationOpts): Observable<Array<Tag> | RawAjaxResponse<Array<Tag>>> {
    const headers: HttpHeaders = {
      ...(this.configuration.username != null && this.configuration.password != null
        ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` }
        : undefined),
    };

    return this.request<Array<Tag>>(
      {
        url: '/api/tags',
        method: 'GET',
        headers,
      },
      opts?.responseOpts
    );
  }

  /**
   */
  tagControllerFindOne({ tagId }: TagControllerFindOneRequest): Observable<Tag>;
  tagControllerFindOne({ tagId }: TagControllerFindOneRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Tag>>;
  tagControllerFindOne({ tagId }: TagControllerFindOneRequest, opts?: OperationOpts): Observable<Tag | RawAjaxResponse<Tag>> {
    throwIfNullOrUndefined(tagId, 'tagId', 'tagControllerFindOne');

    const headers: HttpHeaders = {
      ...(this.configuration.username != null && this.configuration.password != null
        ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` }
        : undefined),
    };

    return this.request<Tag>(
      {
        url: '/api/tags/{tagId}'.replace('{tagId}', encodeURI(tagId)),
        method: 'GET',
        headers,
      },
      opts?.responseOpts
    );
  }

  /**
   */
  tagControllerRemove({ tagId }: TagControllerRemoveRequest): Observable<Tag>;
  tagControllerRemove({ tagId }: TagControllerRemoveRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Tag>>;
  tagControllerRemove({ tagId }: TagControllerRemoveRequest, opts?: OperationOpts): Observable<Tag | RawAjaxResponse<Tag>> {
    throwIfNullOrUndefined(tagId, 'tagId', 'tagControllerRemove');

    const headers: HttpHeaders = {
      ...(this.configuration.username != null && this.configuration.password != null
        ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` }
        : undefined),
    };

    return this.request<Tag>(
      {
        url: '/api/tags/{tagId}'.replace('{tagId}', encodeURI(tagId)),
        method: 'DELETE',
        headers,
      },
      opts?.responseOpts
    );
  }
}

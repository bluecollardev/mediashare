// tslint:disable
/**
 * Mediashare
 * Mediashare API
 *
 * The version of the OpenAPI document: 0.1.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, throwIfNullOrUndefined, encodeURI, OperationOpts, RawAjaxResponse } from '../runtime';
import { MediaItemResponseDto, PlaylistResponseDto, ShareItem, ShareItemsResponseDto } from '../models';

export interface ShareItemsControllerFindShareItemRequest {
  shareId: string;
}

export interface ShareItemsControllerReadShareItemRequest {
  shareId: string;
}

export interface ShareItemsControllerRemoveShareItemRequest {
  shareId: string;
}

/**
 * no description
 */
export class ShareItemsApi extends BaseAPI {
  /**
   */
  shareItemsControllerFindItemsSharedByUser(): Observable<Array<ShareItemsResponseDto>>;
  shareItemsControllerFindItemsSharedByUser(opts?: OperationOpts): Observable<RawAjaxResponse<Array<ShareItemsResponseDto>>>;
  shareItemsControllerFindItemsSharedByUser(opts?: OperationOpts): Observable<Array<ShareItemsResponseDto> | RawAjaxResponse<Array<ShareItemsResponseDto>>> {
    const headers: HttpHeaders = {
      ...(this.configuration.username != null && this.configuration.password != null
        ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` }
        : undefined),
    };

    return this.request<Array<ShareItemsResponseDto>>(
      {
        url: '/api/share-items/shared-by-user',
        method: 'GET',
        headers,
      },
      opts?.responseOpts
    );
  }

  /**
   */
  shareItemsControllerFindItemsSharedWithUser(): Observable<Array<ShareItemsResponseDto>>;
  shareItemsControllerFindItemsSharedWithUser(opts?: OperationOpts): Observable<RawAjaxResponse<Array<ShareItemsResponseDto>>>;
  shareItemsControllerFindItemsSharedWithUser(opts?: OperationOpts): Observable<Array<ShareItemsResponseDto> | RawAjaxResponse<Array<ShareItemsResponseDto>>> {
    const headers: HttpHeaders = {
      ...(this.configuration.username != null && this.configuration.password != null
        ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` }
        : undefined),
    };

    return this.request<Array<ShareItemsResponseDto>>(
      {
        url: '/api/share-items/shared-with-user',
        method: 'GET',
        headers,
      },
      opts?.responseOpts
    );
  }

  /**
   */
  shareItemsControllerFindMediaItemsSharedByUser(): Observable<Array<MediaItemResponseDto>>;
  shareItemsControllerFindMediaItemsSharedByUser(opts?: OperationOpts): Observable<RawAjaxResponse<Array<MediaItemResponseDto>>>;
  shareItemsControllerFindMediaItemsSharedByUser(opts?: OperationOpts): Observable<Array<MediaItemResponseDto> | RawAjaxResponse<Array<MediaItemResponseDto>>> {
    const headers: HttpHeaders = {
      ...(this.configuration.username != null && this.configuration.password != null
        ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` }
        : undefined),
    };

    return this.request<Array<MediaItemResponseDto>>(
      {
        url: '/api/share-items/shared-by-user/media-items',
        method: 'GET',
        headers,
      },
      opts?.responseOpts
    );
  }

  /**
   */
  shareItemsControllerFindMediaItemsSharedWithUser(): Observable<Array<MediaItemResponseDto>>;
  shareItemsControllerFindMediaItemsSharedWithUser(opts?: OperationOpts): Observable<RawAjaxResponse<Array<MediaItemResponseDto>>>;
  shareItemsControllerFindMediaItemsSharedWithUser(
    opts?: OperationOpts
  ): Observable<Array<MediaItemResponseDto> | RawAjaxResponse<Array<MediaItemResponseDto>>> {
    const headers: HttpHeaders = {
      ...(this.configuration.username != null && this.configuration.password != null
        ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` }
        : undefined),
    };

    return this.request<Array<MediaItemResponseDto>>(
      {
        url: '/api/share-items/shared-with-user/media-items',
        method: 'GET',
        headers,
      },
      opts?.responseOpts
    );
  }

  /**
   */
  shareItemsControllerFindPlaylistsSharedByUser(): Observable<Array<PlaylistResponseDto>>;
  shareItemsControllerFindPlaylistsSharedByUser(opts?: OperationOpts): Observable<RawAjaxResponse<Array<PlaylistResponseDto>>>;
  shareItemsControllerFindPlaylistsSharedByUser(opts?: OperationOpts): Observable<Array<PlaylistResponseDto> | RawAjaxResponse<Array<PlaylistResponseDto>>> {
    const headers: HttpHeaders = {
      ...(this.configuration.username != null && this.configuration.password != null
        ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` }
        : undefined),
    };

    return this.request<Array<PlaylistResponseDto>>(
      {
        url: '/api/share-items/shared-by-user/playlists',
        method: 'GET',
        headers,
      },
      opts?.responseOpts
    );
  }

  /**
   */
  shareItemsControllerFindPlaylistsSharedWithUser(): Observable<Array<PlaylistResponseDto>>;
  shareItemsControllerFindPlaylistsSharedWithUser(opts?: OperationOpts): Observable<RawAjaxResponse<Array<PlaylistResponseDto>>>;
  shareItemsControllerFindPlaylistsSharedWithUser(opts?: OperationOpts): Observable<Array<PlaylistResponseDto> | RawAjaxResponse<Array<PlaylistResponseDto>>> {
    const headers: HttpHeaders = {
      ...(this.configuration.username != null && this.configuration.password != null
        ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` }
        : undefined),
    };

    return this.request<Array<PlaylistResponseDto>>(
      {
        url: '/api/share-items/shared-with-user/playlists',
        method: 'GET',
        headers,
      },
      opts?.responseOpts
    );
  }

  /**
   */
  shareItemsControllerFindShareItem({ shareId }: ShareItemsControllerFindShareItemRequest): Observable<ShareItem>;
  shareItemsControllerFindShareItem({ shareId }: ShareItemsControllerFindShareItemRequest, opts?: OperationOpts): Observable<RawAjaxResponse<ShareItem>>;
  shareItemsControllerFindShareItem(
    { shareId }: ShareItemsControllerFindShareItemRequest,
    opts?: OperationOpts
  ): Observable<ShareItem | RawAjaxResponse<ShareItem>> {
    throwIfNullOrUndefined(shareId, 'shareId', 'shareItemsControllerFindShareItem');

    const headers: HttpHeaders = {
      ...(this.configuration.username != null && this.configuration.password != null
        ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` }
        : undefined),
    };

    return this.request<ShareItem>(
      {
        url: '/api/share-items/{shareId}'.replace('{shareId}', encodeURI(shareId)),
        method: 'GET',
        headers,
      },
      opts?.responseOpts
    );
  }

  /**
   */
  shareItemsControllerReadShareItem({ shareId }: ShareItemsControllerReadShareItemRequest): Observable<ShareItem>;
  shareItemsControllerReadShareItem({ shareId }: ShareItemsControllerReadShareItemRequest, opts?: OperationOpts): Observable<RawAjaxResponse<ShareItem>>;
  shareItemsControllerReadShareItem(
    { shareId }: ShareItemsControllerReadShareItemRequest,
    opts?: OperationOpts
  ): Observable<ShareItem | RawAjaxResponse<ShareItem>> {
    throwIfNullOrUndefined(shareId, 'shareId', 'shareItemsControllerReadShareItem');

    const headers: HttpHeaders = {
      ...(this.configuration.username != null && this.configuration.password != null
        ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` }
        : undefined),
    };

    return this.request<ShareItem>(
      {
        url: '/api/share-items/read/{shareId}'.replace('{shareId}', encodeURI(shareId)),
        method: 'POST',
        headers,
      },
      opts?.responseOpts
    );
  }

  /**
   */
  shareItemsControllerRemoveShareItem({ shareId }: ShareItemsControllerRemoveShareItemRequest): Observable<ShareItem>;
  shareItemsControllerRemoveShareItem({ shareId }: ShareItemsControllerRemoveShareItemRequest, opts?: OperationOpts): Observable<RawAjaxResponse<ShareItem>>;
  shareItemsControllerRemoveShareItem(
    { shareId }: ShareItemsControllerRemoveShareItemRequest,
    opts?: OperationOpts
  ): Observable<ShareItem | RawAjaxResponse<ShareItem>> {
    throwIfNullOrUndefined(shareId, 'shareId', 'shareItemsControllerRemoveShareItem');

    const headers: HttpHeaders = {
      ...(this.configuration.username != null && this.configuration.password != null
        ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` }
        : undefined),
    };

    return this.request<ShareItem>(
      {
        url: '/api/share-items/{shareId}'.replace('{shareId}', encodeURI(shareId)),
        method: 'DELETE',
        headers,
      },
      opts?.responseOpts
    );
  }
}

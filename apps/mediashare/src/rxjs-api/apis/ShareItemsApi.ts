// tslint:disable
/**
 * Mediashare
 * Media Share API
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, throwIfNullOrUndefined, encodeURI, OperationOpts, RawAjaxResponse } from '../runtime';
import { ShareItem } from '../models';

export interface ShareItemsControllerFindOneRequest {
  shareId: string;
}

export interface ShareItemsControllerReadSharedItemRequest {
  shareId: string;
}

export interface ShareItemsControllerRemoveRequest {
  shareId: string;
}

/**
 * no description
 */
export class ShareItemsApi extends BaseAPI {
  /**
   */
  shareItemsControllerFindAll(): Observable<Array<ShareItem>>;
  shareItemsControllerFindAll(opts?: OperationOpts): Observable<RawAjaxResponse<Array<ShareItem>>>;
  shareItemsControllerFindAll(opts?: OperationOpts): Observable<Array<ShareItem> | RawAjaxResponse<Array<ShareItem>>> {
    const headers: HttpHeaders = {
      ...(this.configuration.username != null && this.configuration.password != null
        ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` }
        : undefined),
    };

    return this.request<Array<ShareItem>>(
      {
        url: '/api/share-items',
        method: 'GET',
        headers,
      },
      opts?.responseOpts
    );
  }

  /**
   */
  shareItemsControllerFindOne({ shareId }: ShareItemsControllerFindOneRequest): Observable<ShareItem>;
  shareItemsControllerFindOne({ shareId }: ShareItemsControllerFindOneRequest, opts?: OperationOpts): Observable<RawAjaxResponse<ShareItem>>;
  shareItemsControllerFindOne({ shareId }: ShareItemsControllerFindOneRequest, opts?: OperationOpts): Observable<ShareItem | RawAjaxResponse<ShareItem>> {
    throwIfNullOrUndefined(shareId, 'shareId', 'shareItemsControllerFindOne');

    const headers: HttpHeaders = {
      ...(this.configuration.username != null && this.configuration.password != null
        ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` }
        : undefined),
    };

    return this.request<ShareItem>(
      {
        url: '/api/share-items/{shareId}'.replace('{shareId}', encodeURI(shareId)),
        method: 'GET',
        headers,
      },
      opts?.responseOpts
    );
  }

  /**
   */
  shareItemsControllerReadSharedItem({ shareId }: ShareItemsControllerReadSharedItemRequest): Observable<ShareItem>;
  shareItemsControllerReadSharedItem({ shareId }: ShareItemsControllerReadSharedItemRequest, opts?: OperationOpts): Observable<RawAjaxResponse<ShareItem>>;
  shareItemsControllerReadSharedItem(
    { shareId }: ShareItemsControllerReadSharedItemRequest,
    opts?: OperationOpts
  ): Observable<ShareItem | RawAjaxResponse<ShareItem>> {
    throwIfNullOrUndefined(shareId, 'shareId', 'shareItemsControllerReadSharedItem');

    const headers: HttpHeaders = {
      ...(this.configuration.username != null && this.configuration.password != null
        ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` }
        : undefined),
    };

    return this.request<ShareItem>(
      {
        url: '/api/share-items/read/{shareId}'.replace('{shareId}', encodeURI(shareId)),
        method: 'POST',
        headers,
      },
      opts?.responseOpts
    );
  }

  /**
   */
  shareItemsControllerRemove({ shareId }: ShareItemsControllerRemoveRequest): Observable<ShareItem>;
  shareItemsControllerRemove({ shareId }: ShareItemsControllerRemoveRequest, opts?: OperationOpts): Observable<RawAjaxResponse<ShareItem>>;
  shareItemsControllerRemove({ shareId }: ShareItemsControllerRemoveRequest, opts?: OperationOpts): Observable<ShareItem | RawAjaxResponse<ShareItem>> {
    throwIfNullOrUndefined(shareId, 'shareId', 'shareItemsControllerRemove');

    const headers: HttpHeaders = {
      ...(this.configuration.username != null && this.configuration.password != null
        ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` }
        : undefined),
    };

    return this.request<ShareItem>(
      {
        url: '/api/share-items/{shareId}'.replace('{shareId}', encodeURI(shareId)),
        method: 'DELETE',
        headers,
      },
      opts?.responseOpts
    );
  }
}

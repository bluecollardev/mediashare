// tslint:disable
/**
 * Mediashare
 * Mediashare API
 *
 * The version of the OpenAPI document: 0.1.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, HttpQuery, throwIfNullOrUndefined, encodeURI, OperationOpts, RawAjaxResponse } from '../runtime';
import { CreateMediaItemDto, MediaItem, MediaItemResponseDto, ShareItem, UpdateMediaItemDto } from '../models';

export interface MediaItemControllerCreateRequest {
  createMediaItemDto: CreateMediaItemDto;
}

export interface MediaItemControllerFindAllRequest {
  text?: string;
  tags?: Array<string>;
}

export interface MediaItemControllerFindOneRequest {
  mediaId: string;
}

export interface MediaItemControllerRemoveRequest {
  mediaId: string;
}

export interface MediaItemControllerShareRequest {
  mediaId: string;
  userId: string;
}

export interface MediaItemControllerUpdateRequest {
  mediaId: string;
  updateMediaItemDto: UpdateMediaItemDto;
}

/**
 * no description
 */
export class MediaItemsApi extends BaseAPI {
  /**
   */
  mediaItemControllerCreate({ createMediaItemDto }: MediaItemControllerCreateRequest): Observable<MediaItem>;
  mediaItemControllerCreate({ createMediaItemDto }: MediaItemControllerCreateRequest, opts?: OperationOpts): Observable<RawAjaxResponse<MediaItem>>;
  mediaItemControllerCreate(
    { createMediaItemDto }: MediaItemControllerCreateRequest,
    opts?: OperationOpts
  ): Observable<MediaItem | RawAjaxResponse<MediaItem>> {
    throwIfNullOrUndefined(createMediaItemDto, 'createMediaItemDto', 'mediaItemControllerCreate');

    const headers: HttpHeaders = {
      'Content-Type': 'application/json',
      ...(this.configuration.username != null && this.configuration.password != null
        ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` }
        : undefined),
    };

    return this.request<MediaItem>(
      {
        url: '/api/media-items',
        method: 'POST',
        headers,
        body: createMediaItemDto,
      },
      opts?.responseOpts
    );
  }

  /**
   */
  mediaItemControllerFindAll({ text, tags }: MediaItemControllerFindAllRequest): Observable<Array<MediaItemResponseDto>>;
  mediaItemControllerFindAll({ text, tags }: MediaItemControllerFindAllRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Array<MediaItemResponseDto>>>;
  mediaItemControllerFindAll(
    { text, tags }: MediaItemControllerFindAllRequest,
    opts?: OperationOpts
  ): Observable<Array<MediaItemResponseDto> | RawAjaxResponse<Array<MediaItemResponseDto>>> {
    const headers: HttpHeaders = {
      ...(this.configuration.username != null && this.configuration.password != null
        ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` }
        : undefined),
    };

    const query: HttpQuery = {};

    if (text != null) {
      query['text'] = text;
    }
    if (tags != null) {
      query['tags'] = tags;
    }

    return this.request<Array<MediaItemResponseDto>>(
      {
        url: '/api/media-items',
        method: 'GET',
        headers,
        query,
      },
      opts?.responseOpts
    );
  }

  /**
   */
  mediaItemControllerFindOne({ mediaId }: MediaItemControllerFindOneRequest): Observable<MediaItemResponseDto>;
  mediaItemControllerFindOne({ mediaId }: MediaItemControllerFindOneRequest, opts?: OperationOpts): Observable<RawAjaxResponse<MediaItemResponseDto>>;
  mediaItemControllerFindOne(
    { mediaId }: MediaItemControllerFindOneRequest,
    opts?: OperationOpts
  ): Observable<MediaItemResponseDto | RawAjaxResponse<MediaItemResponseDto>> {
    throwIfNullOrUndefined(mediaId, 'mediaId', 'mediaItemControllerFindOne');

    const headers: HttpHeaders = {
      ...(this.configuration.username != null && this.configuration.password != null
        ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` }
        : undefined),
    };

    return this.request<MediaItemResponseDto>(
      {
        url: '/api/media-items/{mediaId}'.replace('{mediaId}', encodeURI(mediaId)),
        method: 'GET',
        headers,
      },
      opts?.responseOpts
    );
  }

  /**
   */
  mediaItemControllerFindPopular(): Observable<Array<MediaItemResponseDto>>;
  mediaItemControllerFindPopular(opts?: OperationOpts): Observable<RawAjaxResponse<Array<MediaItemResponseDto>>>;
  mediaItemControllerFindPopular(opts?: OperationOpts): Observable<Array<MediaItemResponseDto> | RawAjaxResponse<Array<MediaItemResponseDto>>> {
    const headers: HttpHeaders = {
      ...(this.configuration.username != null && this.configuration.password != null
        ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` }
        : undefined),
    };

    return this.request<Array<MediaItemResponseDto>>(
      {
        url: '/api/media-items/popular',
        method: 'GET',
        headers,
      },
      opts?.responseOpts
    );
  }

  /**
   */
  mediaItemControllerGetCategories(): Observable<void>;
  mediaItemControllerGetCategories(opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>;
  mediaItemControllerGetCategories(opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {
    return this.request<void>(
      {
        url: '/api/media-items/categories',
        method: 'GET',
      },
      opts?.responseOpts
    );
  }

  /**
   */
  mediaItemControllerRemove({ mediaId }: MediaItemControllerRemoveRequest): Observable<void>;
  mediaItemControllerRemove({ mediaId }: MediaItemControllerRemoveRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>;
  mediaItemControllerRemove({ mediaId }: MediaItemControllerRemoveRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {
    throwIfNullOrUndefined(mediaId, 'mediaId', 'mediaItemControllerRemove');

    const headers: HttpHeaders = {
      ...(this.configuration.username != null && this.configuration.password != null
        ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` }
        : undefined),
    };

    return this.request<void>(
      {
        url: '/api/media-items/{mediaId}'.replace('{mediaId}', encodeURI(mediaId)),
        method: 'DELETE',
        headers,
      },
      opts?.responseOpts
    );
  }

  /**
   */
  mediaItemControllerShare({ mediaId, userId }: MediaItemControllerShareRequest): Observable<ShareItem>;
  mediaItemControllerShare({ mediaId, userId }: MediaItemControllerShareRequest, opts?: OperationOpts): Observable<RawAjaxResponse<ShareItem>>;
  mediaItemControllerShare({ mediaId, userId }: MediaItemControllerShareRequest, opts?: OperationOpts): Observable<ShareItem | RawAjaxResponse<ShareItem>> {
    throwIfNullOrUndefined(mediaId, 'mediaId', 'mediaItemControllerShare');
    throwIfNullOrUndefined(userId, 'userId', 'mediaItemControllerShare');

    const headers: HttpHeaders = {
      ...(this.configuration.username != null && this.configuration.password != null
        ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` }
        : undefined),
    };

    return this.request<ShareItem>(
      {
        url: '/api/media-items/{mediaId}/share/{userId}'.replace('{mediaId}', encodeURI(mediaId)).replace('{userId}', encodeURI(userId)),
        method: 'POST',
        headers,
      },
      opts?.responseOpts
    );
  }

  /**
   */
  mediaItemControllerUpdate({ mediaId, updateMediaItemDto }: MediaItemControllerUpdateRequest): Observable<MediaItem>;
  mediaItemControllerUpdate({ mediaId, updateMediaItemDto }: MediaItemControllerUpdateRequest, opts?: OperationOpts): Observable<RawAjaxResponse<MediaItem>>;
  mediaItemControllerUpdate(
    { mediaId, updateMediaItemDto }: MediaItemControllerUpdateRequest,
    opts?: OperationOpts
  ): Observable<MediaItem | RawAjaxResponse<MediaItem>> {
    throwIfNullOrUndefined(mediaId, 'mediaId', 'mediaItemControllerUpdate');
    throwIfNullOrUndefined(updateMediaItemDto, 'updateMediaItemDto', 'mediaItemControllerUpdate');

    const headers: HttpHeaders = {
      'Content-Type': 'application/json',
      ...(this.configuration.username != null && this.configuration.password != null
        ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` }
        : undefined),
    };

    return this.request<MediaItem>(
      {
        url: '/api/media-items/{mediaId}'.replace('{mediaId}', encodeURI(mediaId)),
        method: 'PUT',
        headers,
        body: updateMediaItemDto,
      },
      opts?.responseOpts
    );
  }
}

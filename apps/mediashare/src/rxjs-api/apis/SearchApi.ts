// tslint:disable
/**
 * Mediashare
 * Mediashare API
 *
 * The version of the OpenAPI document: 0.1.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, HttpQuery, OperationOpts, RawAjaxResponse } from '../runtime';
import { PlaylistResponseDto } from '../models';

export interface SearchControllerFindAllRequest {
  text?: string;
  tags?: Array<string>;
}

/**
 * no description
 */
export class SearchApi extends BaseAPI {
  /**
   */
  searchControllerFindAll({ text, tags }: SearchControllerFindAllRequest): Observable<Array<PlaylistResponseDto>>;
  searchControllerFindAll({ text, tags }: SearchControllerFindAllRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Array<PlaylistResponseDto>>>;
  searchControllerFindAll(
    { text, tags }: SearchControllerFindAllRequest,
    opts?: OperationOpts
  ): Observable<Array<PlaylistResponseDto> | RawAjaxResponse<Array<PlaylistResponseDto>>> {
    const headers: HttpHeaders = {
      ...(this.configuration.username != null && this.configuration.password != null
        ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` }
        : undefined),
    };

    const query: HttpQuery = {};

    if (text != null) {
      query['text'] = text;
    }
    if (tags != null) {
      query['tags'] = tags;
    }

    return this.request<Array<PlaylistResponseDto>>(
      {
        url: '/api/search',
        method: 'GET',
        headers,
        query,
      },
      opts?.responseOpts
    );
  }

  /**
   */
  searchControllerFindPopular(): Observable<Array<PlaylistResponseDto>>;
  searchControllerFindPopular(opts?: OperationOpts): Observable<RawAjaxResponse<Array<PlaylistResponseDto>>>;
  searchControllerFindPopular(opts?: OperationOpts): Observable<Array<PlaylistResponseDto> | RawAjaxResponse<Array<PlaylistResponseDto>>> {
    const headers: HttpHeaders = {
      ...(this.configuration.username != null && this.configuration.password != null
        ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` }
        : undefined),
    };

    return this.request<Array<PlaylistResponseDto>>(
      {
        url: '/api/search/popular',
        method: 'GET',
        headers,
      },
      opts?.responseOpts
    );
  }
}

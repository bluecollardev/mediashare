// tslint:disable
/**
 * Mediashare
 * Mediashare API
 *
 * The version of the OpenAPI document: 0.1.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, throwIfNullOrUndefined, encodeURI, OperationOpts, RawAjaxResponse } from '../runtime';
import { ProfileDto, UpdateUserDto, UserDto } from '../models';

export interface UsersControllerFindOneRequest {
  userId: string;
}

export interface UsersControllerRemoveRequest {
  userId: string;
}

export interface UsersControllerSetRolesRequest {
  userId: string;
  body: string;
}

export interface UsersControllerUpdateRequest {
  userId: string;
  updateUserDto: UpdateUserDto;
}

/**
 * no description
 */
export class UsersApi extends BaseAPI {
  /**
   */
  usersControllerFindAll(): Observable<Array<UserDto>>;
  usersControllerFindAll(opts?: OperationOpts): Observable<RawAjaxResponse<Array<UserDto>>>;
  usersControllerFindAll(opts?: OperationOpts): Observable<Array<UserDto> | RawAjaxResponse<Array<UserDto>>> {
    const headers: HttpHeaders = {
      ...(this.configuration.username != null && this.configuration.password != null
        ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` }
        : undefined),
    };

    return this.request<Array<UserDto>>(
      {
        url: '/api/users',
        method: 'GET',
        headers,
      },
      opts?.responseOpts
    );
  }

  /**
   */
  usersControllerFindOne({ userId }: UsersControllerFindOneRequest): Observable<ProfileDto>;
  usersControllerFindOne({ userId }: UsersControllerFindOneRequest, opts?: OperationOpts): Observable<RawAjaxResponse<ProfileDto>>;
  usersControllerFindOne({ userId }: UsersControllerFindOneRequest, opts?: OperationOpts): Observable<ProfileDto | RawAjaxResponse<ProfileDto>> {
    throwIfNullOrUndefined(userId, 'userId', 'usersControllerFindOne');

    const headers: HttpHeaders = {
      ...(this.configuration.username != null && this.configuration.password != null
        ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` }
        : undefined),
    };

    return this.request<ProfileDto>(
      {
        url: '/api/users/{userId}'.replace('{userId}', encodeURI(userId)),
        method: 'GET',
        headers,
      },
      opts?.responseOpts
    );
  }

  /**
   */
  usersControllerRemove({ userId }: UsersControllerRemoveRequest): Observable<void>;
  usersControllerRemove({ userId }: UsersControllerRemoveRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>;
  usersControllerRemove({ userId }: UsersControllerRemoveRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {
    throwIfNullOrUndefined(userId, 'userId', 'usersControllerRemove');

    return this.request<void>(
      {
        url: '/api/users/{userId}'.replace('{userId}', encodeURI(userId)),
        method: 'DELETE',
      },
      opts?.responseOpts
    );
  }

  /**
   */
  usersControllerSetRoles({ userId, body }: UsersControllerSetRolesRequest): Observable<UserDto>;
  usersControllerSetRoles({ userId, body }: UsersControllerSetRolesRequest, opts?: OperationOpts): Observable<RawAjaxResponse<UserDto>>;
  usersControllerSetRoles({ userId, body }: UsersControllerSetRolesRequest, opts?: OperationOpts): Observable<UserDto | RawAjaxResponse<UserDto>> {
    throwIfNullOrUndefined(userId, 'userId', 'usersControllerSetRoles');
    throwIfNullOrUndefined(body, 'body', 'usersControllerSetRoles');

    const headers: HttpHeaders = {
      'Content-Type': 'application/json',
      ...(this.configuration.username != null && this.configuration.password != null
        ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` }
        : undefined),
    };

    return this.request<UserDto>(
      {
        url: '/api/users/{userId}/roles'.replace('{userId}', encodeURI(userId)),
        method: 'PUT',
        headers,
        body: body as any,
      },
      opts?.responseOpts
    );
  }

  /**
   */
  usersControllerUpdate({ userId, updateUserDto }: UsersControllerUpdateRequest): Observable<UserDto>;
  usersControllerUpdate({ userId, updateUserDto }: UsersControllerUpdateRequest, opts?: OperationOpts): Observable<RawAjaxResponse<UserDto>>;
  usersControllerUpdate({ userId, updateUserDto }: UsersControllerUpdateRequest, opts?: OperationOpts): Observable<UserDto | RawAjaxResponse<UserDto>> {
    throwIfNullOrUndefined(userId, 'userId', 'usersControllerUpdate');
    throwIfNullOrUndefined(updateUserDto, 'updateUserDto', 'usersControllerUpdate');

    const headers: HttpHeaders = {
      'Content-Type': 'application/json',
      ...(this.configuration.username != null && this.configuration.password != null
        ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` }
        : undefined),
    };

    return this.request<UserDto>(
      {
        url: '/api/users/{userId}'.replace('{userId}', encodeURI(userId)),
        method: 'PUT',
        headers,
        body: updateUserDto,
      },
      opts?.responseOpts
    );
  }
}

// tslint:disable
/**
 * Mediashare
 * Mediashare API
 *
 * The version of the OpenAPI document: 0.1.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, HttpQuery, throwIfNullOrUndefined, encodeURI, OperationOpts, RawAjaxResponse } from '../runtime';
import { CreatePlaylistItemDto, PlaylistItem, PlaylistItemResponseDto, ShareItem, UpdatePlaylistItemDto } from '../models';

export interface PlaylistItemControllerCreateRequest {
  createPlaylistItemDto: CreatePlaylistItemDto;
}

export interface PlaylistItemControllerFindAllRequest {
  text?: string;
  tags?: Array<string>;
}

export interface PlaylistItemControllerFindOneRequest {
  playlistItemId: string;
}

export interface PlaylistItemControllerRemoveRequest {
  playlistItemId: string;
}

export interface PlaylistItemControllerShareRequest {
  playlistItemId: string;
  userId: string;
}

export interface PlaylistItemControllerUpdateRequest {
  playlistItemId: string;
  updatePlaylistItemDto: UpdatePlaylistItemDto;
}

/**
 * no description
 */
export class PlaylistItemsApi extends BaseAPI {
  /**
   */
  playlistItemControllerCreate({ createPlaylistItemDto }: PlaylistItemControllerCreateRequest): Observable<PlaylistItem>;
  playlistItemControllerCreate({ createPlaylistItemDto }: PlaylistItemControllerCreateRequest, opts?: OperationOpts): Observable<RawAjaxResponse<PlaylistItem>>;
  playlistItemControllerCreate(
    { createPlaylistItemDto }: PlaylistItemControllerCreateRequest,
    opts?: OperationOpts
  ): Observable<PlaylistItem | RawAjaxResponse<PlaylistItem>> {
    throwIfNullOrUndefined(createPlaylistItemDto, 'createPlaylistItemDto', 'playlistItemControllerCreate');

    const headers: HttpHeaders = {
      'Content-Type': 'application/json',
      ...(this.configuration.username != null && this.configuration.password != null
        ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` }
        : undefined),
    };

    return this.request<PlaylistItem>(
      {
        url: '/api/playlist-items',
        method: 'POST',
        headers,
        body: createPlaylistItemDto,
      },
      opts?.responseOpts
    );
  }

  /**
   */
  playlistItemControllerFindAll({ text, tags }: PlaylistItemControllerFindAllRequest): Observable<Array<PlaylistItemResponseDto>>;
  playlistItemControllerFindAll(
    { text, tags }: PlaylistItemControllerFindAllRequest,
    opts?: OperationOpts
  ): Observable<RawAjaxResponse<Array<PlaylistItemResponseDto>>>;
  playlistItemControllerFindAll(
    { text, tags }: PlaylistItemControllerFindAllRequest,
    opts?: OperationOpts
  ): Observable<Array<PlaylistItemResponseDto> | RawAjaxResponse<Array<PlaylistItemResponseDto>>> {
    const headers: HttpHeaders = {
      ...(this.configuration.username != null && this.configuration.password != null
        ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` }
        : undefined),
    };

    const query: HttpQuery = {};

    if (text != null) {
      query['text'] = text;
    }
    if (tags != null) {
      query['tags'] = tags;
    }

    return this.request<Array<PlaylistItemResponseDto>>(
      {
        url: '/api/playlist-items',
        method: 'GET',
        headers,
        query,
      },
      opts?.responseOpts
    );
  }

  /**
   */
  playlistItemControllerFindOne({ playlistItemId }: PlaylistItemControllerFindOneRequest): Observable<PlaylistItemResponseDto>;
  playlistItemControllerFindOne(
    { playlistItemId }: PlaylistItemControllerFindOneRequest,
    opts?: OperationOpts
  ): Observable<RawAjaxResponse<PlaylistItemResponseDto>>;
  playlistItemControllerFindOne(
    { playlistItemId }: PlaylistItemControllerFindOneRequest,
    opts?: OperationOpts
  ): Observable<PlaylistItemResponseDto | RawAjaxResponse<PlaylistItemResponseDto>> {
    throwIfNullOrUndefined(playlistItemId, 'playlistItemId', 'playlistItemControllerFindOne');

    const headers: HttpHeaders = {
      ...(this.configuration.username != null && this.configuration.password != null
        ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` }
        : undefined),
    };

    return this.request<PlaylistItemResponseDto>(
      {
        url: '/api/playlist-items/{playlistItemId}'.replace('{playlistItemId}', encodeURI(playlistItemId)),
        method: 'GET',
        headers,
      },
      opts?.responseOpts
    );
  }

  /**
   */
  playlistItemControllerFindPopular(): Observable<Array<PlaylistItemResponseDto>>;
  playlistItemControllerFindPopular(opts?: OperationOpts): Observable<RawAjaxResponse<Array<PlaylistItemResponseDto>>>;
  playlistItemControllerFindPopular(opts?: OperationOpts): Observable<Array<PlaylistItemResponseDto> | RawAjaxResponse<Array<PlaylistItemResponseDto>>> {
    const headers: HttpHeaders = {
      ...(this.configuration.username != null && this.configuration.password != null
        ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` }
        : undefined),
    };

    return this.request<Array<PlaylistItemResponseDto>>(
      {
        url: '/api/playlist-items/popular',
        method: 'GET',
        headers,
      },
      opts?.responseOpts
    );
  }

  /**
   */
  playlistItemControllerGetCategories(): Observable<void>;
  playlistItemControllerGetCategories(opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>;
  playlistItemControllerGetCategories(opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {
    return this.request<void>(
      {
        url: '/api/playlist-items/categories',
        method: 'GET',
      },
      opts?.responseOpts
    );
  }

  /**
   */
  playlistItemControllerRemove({ playlistItemId }: PlaylistItemControllerRemoveRequest): Observable<void>;
  playlistItemControllerRemove({ playlistItemId }: PlaylistItemControllerRemoveRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>;
  playlistItemControllerRemove({ playlistItemId }: PlaylistItemControllerRemoveRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {
    throwIfNullOrUndefined(playlistItemId, 'playlistItemId', 'playlistItemControllerRemove');

    const headers: HttpHeaders = {
      ...(this.configuration.username != null && this.configuration.password != null
        ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` }
        : undefined),
    };

    return this.request<void>(
      {
        url: '/api/playlist-items/{playlistItemId}'.replace('{playlistItemId}', encodeURI(playlistItemId)),
        method: 'DELETE',
        headers,
      },
      opts?.responseOpts
    );
  }

  /**
   */
  playlistItemControllerShare({ playlistItemId, userId }: PlaylistItemControllerShareRequest): Observable<ShareItem>;
  playlistItemControllerShare({ playlistItemId, userId }: PlaylistItemControllerShareRequest, opts?: OperationOpts): Observable<RawAjaxResponse<ShareItem>>;
  playlistItemControllerShare(
    { playlistItemId, userId }: PlaylistItemControllerShareRequest,
    opts?: OperationOpts
  ): Observable<ShareItem | RawAjaxResponse<ShareItem>> {
    throwIfNullOrUndefined(playlistItemId, 'playlistItemId', 'playlistItemControllerShare');
    throwIfNullOrUndefined(userId, 'userId', 'playlistItemControllerShare');

    const headers: HttpHeaders = {
      ...(this.configuration.username != null && this.configuration.password != null
        ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` }
        : undefined),
    };

    return this.request<ShareItem>(
      {
        url: '/api/playlist-items/{playlistItemId}/share/{userId}'
          .replace('{playlistItemId}', encodeURI(playlistItemId))
          .replace('{userId}', encodeURI(userId)),
        method: 'POST',
        headers,
      },
      opts?.responseOpts
    );
  }

  /**
   */
  playlistItemControllerUpdate({ playlistItemId, updatePlaylistItemDto }: PlaylistItemControllerUpdateRequest): Observable<PlaylistItem>;
  playlistItemControllerUpdate(
    { playlistItemId, updatePlaylistItemDto }: PlaylistItemControllerUpdateRequest,
    opts?: OperationOpts
  ): Observable<RawAjaxResponse<PlaylistItem>>;
  playlistItemControllerUpdate(
    { playlistItemId, updatePlaylistItemDto }: PlaylistItemControllerUpdateRequest,
    opts?: OperationOpts
  ): Observable<PlaylistItem | RawAjaxResponse<PlaylistItem>> {
    throwIfNullOrUndefined(playlistItemId, 'playlistItemId', 'playlistItemControllerUpdate');
    throwIfNullOrUndefined(updatePlaylistItemDto, 'updatePlaylistItemDto', 'playlistItemControllerUpdate');

    const headers: HttpHeaders = {
      'Content-Type': 'application/json',
      ...(this.configuration.username != null && this.configuration.password != null
        ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` }
        : undefined),
    };

    return this.request<PlaylistItem>(
      {
        url: '/api/playlist-items/{playlistItemId}'.replace('{playlistItemId}', encodeURI(playlistItemId)),
        method: 'PUT',
        headers,
        body: updatePlaylistItemDto,
      },
      opts?.responseOpts
    );
  }
}

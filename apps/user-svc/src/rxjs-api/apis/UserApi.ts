// tslint:disable
/**
 * User Service
 * User Service
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import {
  BaseAPI,
  HttpHeaders,
  throwIfNullOrUndefined,
  encodeURI,
  OperationOpts,
  RawAjaxResponse,
} from '../runtime';
import {
  CreateUserConnectionDto,
  CreateUserDto,
  InviteDto,
  ProfileDto,
  UpdateUserDto,
  UserConnectionDto,
  UserDto,
} from '../models';

export interface UserControllerCreateUserRequest {
  createUserDto: CreateUserDto;
}

export interface UserControllerCreateUserConnectionRequest {
  createUserConnectionDto: CreateUserConnectionDto;
}

export interface UserControllerDeleteUserRequest {
  userId: string;
}

export interface UserControllerGetUserRequest {
  userId: string;
}

export interface UserControllerGetUserBySubRequest {
  sub: string;
}

export interface UserControllerGetUserConnectionsRequest {
  userId: string;
}

export interface UserControllerInviteRequest {
  inviteDto: InviteDto;
}

export interface UserControllerRemoveUserConnectionRequest {
  userConnectionDto: UserConnectionDto;
}

export interface UserControllerRemoveUserConnectionsRequest {
  userConnectionDto: Array<UserConnectionDto>;
}

export interface UserControllerUpdateCurrentUserRequest {
  updateUserDto: UpdateUserDto;
}

export interface UserControllerUpdateUserRequest {
  userId: string;
  updateUserDto: UpdateUserDto;
}

/**
 * no description
 */
export class UserApi extends BaseAPI {
  /**
   */
  userControllerAuthorize(): Observable<void>;
  userControllerAuthorize(
    opts?: OperationOpts
  ): Observable<void | RawAjaxResponse<void>>;
  userControllerAuthorize(
    opts?: OperationOpts
  ): Observable<void | RawAjaxResponse<void>> {
    const headers: HttpHeaders = {
      ...(this.configuration.username != null &&
      this.configuration.password != null
        ? {
            Authorization: `Basic ${btoa(
              this.configuration.username + ':' + this.configuration.password
            )}`,
          }
        : undefined),
    };

    return this.request<void>(
      {
        url: '/api/user/authorize',
        method: 'POST',
        headers,
      },
      opts?.responseOpts
    );
  }

  /**
   */
  userControllerCreateUser({
    createUserDto,
  }: UserControllerCreateUserRequest): Observable<UserDto>;
  userControllerCreateUser(
    { createUserDto }: UserControllerCreateUserRequest,
    opts?: OperationOpts
  ): Observable<RawAjaxResponse<UserDto>>;
  userControllerCreateUser(
    { createUserDto }: UserControllerCreateUserRequest,
    opts?: OperationOpts
  ): Observable<UserDto | RawAjaxResponse<UserDto>> {
    throwIfNullOrUndefined(
      createUserDto,
      'createUserDto',
      'userControllerCreateUser'
    );

    const headers: HttpHeaders = {
      'Content-Type': 'application/json',
      ...(this.configuration.username != null &&
      this.configuration.password != null
        ? {
            Authorization: `Basic ${btoa(
              this.configuration.username + ':' + this.configuration.password
            )}`,
          }
        : undefined),
    };

    return this.request<UserDto>(
      {
        url: '/api/user',
        method: 'POST',
        headers,
        body: createUserDto,
      },
      opts?.responseOpts
    );
  }

  /**
   */
  userControllerCreateUserConnection({
    createUserConnectionDto,
  }: UserControllerCreateUserConnectionRequest): Observable<void>;
  userControllerCreateUserConnection(
    { createUserConnectionDto }: UserControllerCreateUserConnectionRequest,
    opts?: OperationOpts
  ): Observable<void | RawAjaxResponse<void>>;
  userControllerCreateUserConnection(
    { createUserConnectionDto }: UserControllerCreateUserConnectionRequest,
    opts?: OperationOpts
  ): Observable<void | RawAjaxResponse<void>> {
    throwIfNullOrUndefined(
      createUserConnectionDto,
      'createUserConnectionDto',
      'userControllerCreateUserConnection'
    );

    const headers: HttpHeaders = {
      'Content-Type': 'application/json',
      ...(this.configuration.username != null &&
      this.configuration.password != null
        ? {
            Authorization: `Basic ${btoa(
              this.configuration.username + ':' + this.configuration.password
            )}`,
          }
        : undefined),
    };

    return this.request<void>(
      {
        url: '/api/user/connections/create',
        method: 'POST',
        headers,
        body: createUserConnectionDto,
      },
      opts?.responseOpts
    );
  }

  /**
   */
  userControllerDeleteCurrentUser(): Observable<void>;
  userControllerDeleteCurrentUser(
    opts?: OperationOpts
  ): Observable<void | RawAjaxResponse<void>>;
  userControllerDeleteCurrentUser(
    opts?: OperationOpts
  ): Observable<void | RawAjaxResponse<void>> {
    const headers: HttpHeaders = {
      ...(this.configuration.username != null &&
      this.configuration.password != null
        ? {
            Authorization: `Basic ${btoa(
              this.configuration.username + ':' + this.configuration.password
            )}`,
          }
        : undefined),
    };

    return this.request<void>(
      {
        url: '/api/user',
        method: 'DELETE',
        headers,
      },
      opts?.responseOpts
    );
  }

  /**
   */
  userControllerDeleteUser({
    userId,
  }: UserControllerDeleteUserRequest): Observable<void>;
  userControllerDeleteUser(
    { userId }: UserControllerDeleteUserRequest,
    opts?: OperationOpts
  ): Observable<void | RawAjaxResponse<void>>;
  userControllerDeleteUser(
    { userId }: UserControllerDeleteUserRequest,
    opts?: OperationOpts
  ): Observable<void | RawAjaxResponse<void>> {
    throwIfNullOrUndefined(userId, 'userId', 'userControllerDeleteUser');

    const headers: HttpHeaders = {
      ...(this.configuration.username != null &&
      this.configuration.password != null
        ? {
            Authorization: `Basic ${btoa(
              this.configuration.username + ':' + this.configuration.password
            )}`,
          }
        : undefined),
    };

    return this.request<void>(
      {
        url: '/api/user/{userId}'.replace('{userId}', encodeURI(userId)),
        method: 'DELETE',
        headers,
      },
      opts?.responseOpts
    );
  }

  /**
   */
  userControllerGetCurrentUser(): Observable<UserDto>;
  userControllerGetCurrentUser(
    opts?: OperationOpts
  ): Observable<RawAjaxResponse<UserDto>>;
  userControllerGetCurrentUser(
    opts?: OperationOpts
  ): Observable<UserDto | RawAjaxResponse<UserDto>> {
    const headers: HttpHeaders = {
      ...(this.configuration.username != null &&
      this.configuration.password != null
        ? {
            Authorization: `Basic ${btoa(
              this.configuration.username + ':' + this.configuration.password
            )}`,
          }
        : undefined),
    };

    return this.request<UserDto>(
      {
        url: '/api/user',
        method: 'GET',
        headers,
      },
      opts?.responseOpts
    );
  }

  /**
   */
  userControllerGetCurrentUserConnections(): Observable<Array<UserDto>>;
  userControllerGetCurrentUserConnections(
    opts?: OperationOpts
  ): Observable<RawAjaxResponse<Array<UserDto>>>;
  userControllerGetCurrentUserConnections(
    opts?: OperationOpts
  ): Observable<Array<UserDto> | RawAjaxResponse<Array<UserDto>>> {
    const headers: HttpHeaders = {
      ...(this.configuration.username != null &&
      this.configuration.password != null
        ? {
            Authorization: `Basic ${btoa(
              this.configuration.username + ':' + this.configuration.password
            )}`,
          }
        : undefined),
    };

    return this.request<Array<UserDto>>(
      {
        url: '/api/user/connections',
        method: 'GET',
        headers,
      },
      opts?.responseOpts
    );
  }

  /**
   */
  userControllerGetUser({
    userId,
  }: UserControllerGetUserRequest): Observable<UserDto>;
  userControllerGetUser(
    { userId }: UserControllerGetUserRequest,
    opts?: OperationOpts
  ): Observable<RawAjaxResponse<UserDto>>;
  userControllerGetUser(
    { userId }: UserControllerGetUserRequest,
    opts?: OperationOpts
  ): Observable<UserDto | RawAjaxResponse<UserDto>> {
    throwIfNullOrUndefined(userId, 'userId', 'userControllerGetUser');

    const headers: HttpHeaders = {
      ...(this.configuration.username != null &&
      this.configuration.password != null
        ? {
            Authorization: `Basic ${btoa(
              this.configuration.username + ':' + this.configuration.password
            )}`,
          }
        : undefined),
    };

    return this.request<UserDto>(
      {
        url: '/api/user/{userId}'.replace('{userId}', encodeURI(userId)),
        method: 'GET',
        headers,
      },
      opts?.responseOpts
    );
  }

  /**
   */
  userControllerGetUserBySub({
    sub,
  }: UserControllerGetUserBySubRequest): Observable<UserDto>;
  userControllerGetUserBySub(
    { sub }: UserControllerGetUserBySubRequest,
    opts?: OperationOpts
  ): Observable<RawAjaxResponse<UserDto>>;
  userControllerGetUserBySub(
    { sub }: UserControllerGetUserBySubRequest,
    opts?: OperationOpts
  ): Observable<UserDto | RawAjaxResponse<UserDto>> {
    throwIfNullOrUndefined(sub, 'sub', 'userControllerGetUserBySub');

    const headers: HttpHeaders = {
      ...(this.configuration.username != null &&
      this.configuration.password != null
        ? {
            Authorization: `Basic ${btoa(
              this.configuration.username + ':' + this.configuration.password
            )}`,
          }
        : undefined),
    };

    return this.request<UserDto>(
      {
        url: '/api/user/sub/{sub}'.replace('{sub}', encodeURI(sub)),
        method: 'GET',
        headers,
      },
      opts?.responseOpts
    );
  }

  /**
   */
  userControllerGetUserConnections({
    userId,
  }: UserControllerGetUserConnectionsRequest): Observable<Array<UserDto>>;
  userControllerGetUserConnections(
    { userId }: UserControllerGetUserConnectionsRequest,
    opts?: OperationOpts
  ): Observable<RawAjaxResponse<Array<UserDto>>>;
  userControllerGetUserConnections(
    { userId }: UserControllerGetUserConnectionsRequest,
    opts?: OperationOpts
  ): Observable<Array<UserDto> | RawAjaxResponse<Array<UserDto>>> {
    throwIfNullOrUndefined(
      userId,
      'userId',
      'userControllerGetUserConnections'
    );

    const headers: HttpHeaders = {
      ...(this.configuration.username != null &&
      this.configuration.password != null
        ? {
            Authorization: `Basic ${btoa(
              this.configuration.username + ':' + this.configuration.password
            )}`,
          }
        : undefined),
    };

    return this.request<Array<UserDto>>(
      {
        url: '/api/user/connections/{userId}'.replace(
          '{userId}',
          encodeURI(userId)
        ),
        method: 'GET',
        headers,
      },
      opts?.responseOpts
    );
  }

  /**
   */
  userControllerInvite({
    inviteDto,
  }: UserControllerInviteRequest): Observable<ProfileDto>;
  userControllerInvite(
    { inviteDto }: UserControllerInviteRequest,
    opts?: OperationOpts
  ): Observable<RawAjaxResponse<ProfileDto>>;
  userControllerInvite(
    { inviteDto }: UserControllerInviteRequest,
    opts?: OperationOpts
  ): Observable<ProfileDto | RawAjaxResponse<ProfileDto>> {
    throwIfNullOrUndefined(inviteDto, 'inviteDto', 'userControllerInvite');

    const headers: HttpHeaders = {
      'Content-Type': 'application/json',
    };

    return this.request<ProfileDto>(
      {
        url: '/api/user/invite',
        method: 'POST',
        headers,
        body: inviteDto,
      },
      opts?.responseOpts
    );
  }

  /**
   */
  userControllerLogout(): Observable<void>;
  userControllerLogout(
    opts?: OperationOpts
  ): Observable<void | RawAjaxResponse<void>>;
  userControllerLogout(
    opts?: OperationOpts
  ): Observable<void | RawAjaxResponse<void>> {
    const headers: HttpHeaders = {
      ...(this.configuration.username != null &&
      this.configuration.password != null
        ? {
            Authorization: `Basic ${btoa(
              this.configuration.username + ':' + this.configuration.password
            )}`,
          }
        : undefined),
    };

    return this.request<void>(
      {
        url: '/api/user/logout',
        method: 'POST',
        headers,
      },
      opts?.responseOpts
    );
  }

  /**
   */
  userControllerRemoveUserConnection({
    userConnectionDto,
  }: UserControllerRemoveUserConnectionRequest): Observable<void>;
  userControllerRemoveUserConnection(
    { userConnectionDto }: UserControllerRemoveUserConnectionRequest,
    opts?: OperationOpts
  ): Observable<void | RawAjaxResponse<void>>;
  userControllerRemoveUserConnection(
    { userConnectionDto }: UserControllerRemoveUserConnectionRequest,
    opts?: OperationOpts
  ): Observable<void | RawAjaxResponse<void>> {
    throwIfNullOrUndefined(
      userConnectionDto,
      'userConnectionDto',
      'userControllerRemoveUserConnection'
    );

    const headers: HttpHeaders = {
      'Content-Type': 'application/json',
      ...(this.configuration.username != null &&
      this.configuration.password != null
        ? {
            Authorization: `Basic ${btoa(
              this.configuration.username + ':' + this.configuration.password
            )}`,
          }
        : undefined),
    };

    return this.request<void>(
      {
        url: '/api/user/connection/remove',
        method: 'POST',
        headers,
        body: userConnectionDto,
      },
      opts?.responseOpts
    );
  }

  /**
   */
  userControllerRemoveUserConnections({
    userConnectionDto,
  }: UserControllerRemoveUserConnectionsRequest): Observable<void>;
  userControllerRemoveUserConnections(
    { userConnectionDto }: UserControllerRemoveUserConnectionsRequest,
    opts?: OperationOpts
  ): Observable<void | RawAjaxResponse<void>>;
  userControllerRemoveUserConnections(
    { userConnectionDto }: UserControllerRemoveUserConnectionsRequest,
    opts?: OperationOpts
  ): Observable<void | RawAjaxResponse<void>> {
    throwIfNullOrUndefined(
      userConnectionDto,
      'userConnectionDto',
      'userControllerRemoveUserConnections'
    );

    const headers: HttpHeaders = {
      'Content-Type': 'application/json',
      ...(this.configuration.username != null &&
      this.configuration.password != null
        ? {
            Authorization: `Basic ${btoa(
              this.configuration.username + ':' + this.configuration.password
            )}`,
          }
        : undefined),
    };

    return this.request<void>(
      {
        url: '/api/user/connections/remove',
        method: 'POST',
        headers,
        body: userConnectionDto,
      },
      opts?.responseOpts
    );
  }

  /**
   */
  userControllerUpdateCurrentUser({
    updateUserDto,
  }: UserControllerUpdateCurrentUserRequest): Observable<UserDto>;
  userControllerUpdateCurrentUser(
    { updateUserDto }: UserControllerUpdateCurrentUserRequest,
    opts?: OperationOpts
  ): Observable<RawAjaxResponse<UserDto>>;
  userControllerUpdateCurrentUser(
    { updateUserDto }: UserControllerUpdateCurrentUserRequest,
    opts?: OperationOpts
  ): Observable<UserDto | RawAjaxResponse<UserDto>> {
    throwIfNullOrUndefined(
      updateUserDto,
      'updateUserDto',
      'userControllerUpdateCurrentUser'
    );

    const headers: HttpHeaders = {
      'Content-Type': 'application/json',
      ...(this.configuration.username != null &&
      this.configuration.password != null
        ? {
            Authorization: `Basic ${btoa(
              this.configuration.username + ':' + this.configuration.password
            )}`,
          }
        : undefined),
    };

    return this.request<UserDto>(
      {
        url: '/api/user',
        method: 'PUT',
        headers,
        body: updateUserDto,
      },
      opts?.responseOpts
    );
  }

  /**
   */
  userControllerUpdateUser({
    userId,
    updateUserDto,
  }: UserControllerUpdateUserRequest): Observable<UserDto>;
  userControllerUpdateUser(
    { userId, updateUserDto }: UserControllerUpdateUserRequest,
    opts?: OperationOpts
  ): Observable<RawAjaxResponse<UserDto>>;
  userControllerUpdateUser(
    { userId, updateUserDto }: UserControllerUpdateUserRequest,
    opts?: OperationOpts
  ): Observable<UserDto | RawAjaxResponse<UserDto>> {
    throwIfNullOrUndefined(userId, 'userId', 'userControllerUpdateUser');
    throwIfNullOrUndefined(
      updateUserDto,
      'updateUserDto',
      'userControllerUpdateUser'
    );

    const headers: HttpHeaders = {
      'Content-Type': 'application/json',
      ...(this.configuration.username != null &&
      this.configuration.password != null
        ? {
            Authorization: `Basic ${btoa(
              this.configuration.username + ':' + this.configuration.password
            )}`,
          }
        : undefined),
    };

    return this.request<UserDto>(
      {
        url: '/api/user/{userId}'.replace('{userId}', encodeURI(userId)),
        method: 'PUT',
        headers,
        body: updateUserDto,
      },
      opts?.responseOpts
    );
  }
}

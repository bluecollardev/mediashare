// tslint:disable
/**
 * Media Service
 * Media Service
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import {
  BaseAPI,
  HttpHeaders,
  HttpQuery,
  throwIfNullOrUndefined,
  encodeURI,
  OperationOpts,
  RawAjaxResponse,
} from '../runtime';
import {
  CreatePlaylistDto,
  Playlist,
  PlaylistDto,
  UpdatePlaylistDto,
} from '../models';

export interface PlaylistControllerCreateRequest {
  createPlaylistDto: CreatePlaylistDto;
}

export interface PlaylistControllerFindAllRequest {
  text?: string;
  tags?: Array<string>;
}

export interface PlaylistControllerFindOneRequest {
  playlistId: string;
}

export interface PlaylistControllerRemoveRequest {
  playlistId: string;
}

export interface PlaylistControllerShareRequest {
  playlistId: string;
  userId: string;
}

export interface PlaylistControllerUpdateRequest {
  playlistId: string;
  updatePlaylistDto: UpdatePlaylistDto;
}

/**
 * no description
 */
export class PlaylistsApi extends BaseAPI {
  /**
   */
  playlistControllerCreate({
    createPlaylistDto,
  }: PlaylistControllerCreateRequest): Observable<PlaylistDto>;
  playlistControllerCreate(
    { createPlaylistDto }: PlaylistControllerCreateRequest,
    opts?: OperationOpts
  ): Observable<RawAjaxResponse<PlaylistDto>>;
  playlistControllerCreate(
    { createPlaylistDto }: PlaylistControllerCreateRequest,
    opts?: OperationOpts
  ): Observable<PlaylistDto | RawAjaxResponse<PlaylistDto>> {
    throwIfNullOrUndefined(
      createPlaylistDto,
      'createPlaylistDto',
      'playlistControllerCreate'
    );

    const headers: HttpHeaders = {
      'Content-Type': 'application/json',
      ...(this.configuration.username != null &&
      this.configuration.password != null
        ? {
            Authorization: `Basic ${btoa(
              this.configuration.username + ':' + this.configuration.password
            )}`,
          }
        : undefined),
    };

    return this.request<PlaylistDto>(
      {
        url: '/api/playlists',
        method: 'POST',
        headers,
        body: createPlaylistDto,
      },
      opts?.responseOpts
    );
  }

  /**
   */
  playlistControllerFindAll({
    text,
    tags,
  }: PlaylistControllerFindAllRequest): Observable<Array<PlaylistDto>>;
  playlistControllerFindAll(
    { text, tags }: PlaylistControllerFindAllRequest,
    opts?: OperationOpts
  ): Observable<RawAjaxResponse<Array<PlaylistDto>>>;
  playlistControllerFindAll(
    { text, tags }: PlaylistControllerFindAllRequest,
    opts?: OperationOpts
  ): Observable<Array<PlaylistDto> | RawAjaxResponse<Array<PlaylistDto>>> {
    const headers: HttpHeaders = {
      ...(this.configuration.username != null &&
      this.configuration.password != null
        ? {
            Authorization: `Basic ${btoa(
              this.configuration.username + ':' + this.configuration.password
            )}`,
          }
        : undefined),
    };

    const query: HttpQuery = {};

    if (text != null) {
      query['text'] = text;
    }
    if (tags != null) {
      query['tags'] = tags;
    }

    return this.request<Array<PlaylistDto>>(
      {
        url: '/api/playlists',
        method: 'GET',
        headers,
        query,
      },
      opts?.responseOpts
    );
  }

  /**
   */
  playlistControllerFindOne({
    playlistId,
  }: PlaylistControllerFindOneRequest): Observable<PlaylistDto>;
  playlistControllerFindOne(
    { playlistId }: PlaylistControllerFindOneRequest,
    opts?: OperationOpts
  ): Observable<RawAjaxResponse<PlaylistDto>>;
  playlistControllerFindOne(
    { playlistId }: PlaylistControllerFindOneRequest,
    opts?: OperationOpts
  ): Observable<PlaylistDto | RawAjaxResponse<PlaylistDto>> {
    throwIfNullOrUndefined(
      playlistId,
      'playlistId',
      'playlistControllerFindOne'
    );

    const headers: HttpHeaders = {
      ...(this.configuration.username != null &&
      this.configuration.password != null
        ? {
            Authorization: `Basic ${btoa(
              this.configuration.username + ':' + this.configuration.password
            )}`,
          }
        : undefined),
    };

    return this.request<PlaylistDto>(
      {
        url: '/api/playlists/{playlistId}'.replace(
          '{playlistId}',
          encodeURI(playlistId)
        ),
        method: 'GET',
        headers,
      },
      opts?.responseOpts
    );
  }

  /**
   */
  playlistControllerGetVisibilities(): Observable<void>;
  playlistControllerGetVisibilities(
    opts?: OperationOpts
  ): Observable<void | RawAjaxResponse<void>>;
  playlistControllerGetVisibilities(
    opts?: OperationOpts
  ): Observable<void | RawAjaxResponse<void>> {
    return this.request<void>(
      {
        url: '/api/playlists/visibilities',
        method: 'GET',
      },
      opts?.responseOpts
    );
  }

  /**
   */
  playlistControllerRemove({
    playlistId,
  }: PlaylistControllerRemoveRequest): Observable<void>;
  playlistControllerRemove(
    { playlistId }: PlaylistControllerRemoveRequest,
    opts?: OperationOpts
  ): Observable<void | RawAjaxResponse<void>>;
  playlistControllerRemove(
    { playlistId }: PlaylistControllerRemoveRequest,
    opts?: OperationOpts
  ): Observable<void | RawAjaxResponse<void>> {
    throwIfNullOrUndefined(
      playlistId,
      'playlistId',
      'playlistControllerRemove'
    );

    const headers: HttpHeaders = {
      ...(this.configuration.username != null &&
      this.configuration.password != null
        ? {
            Authorization: `Basic ${btoa(
              this.configuration.username + ':' + this.configuration.password
            )}`,
          }
        : undefined),
    };

    return this.request<void>(
      {
        url: '/api/playlists/{playlistId}'.replace(
          '{playlistId}',
          encodeURI(playlistId)
        ),
        method: 'DELETE',
        headers,
      },
      opts?.responseOpts
    );
  }

  /**
   */
  playlistControllerShare({
    playlistId,
    userId,
  }: PlaylistControllerShareRequest): Observable<Array<object>>;
  playlistControllerShare(
    { playlistId, userId }: PlaylistControllerShareRequest,
    opts?: OperationOpts
  ): Observable<RawAjaxResponse<Array<object>>>;
  playlistControllerShare(
    { playlistId, userId }: PlaylistControllerShareRequest,
    opts?: OperationOpts
  ): Observable<Array<object> | RawAjaxResponse<Array<object>>> {
    throwIfNullOrUndefined(playlistId, 'playlistId', 'playlistControllerShare');
    throwIfNullOrUndefined(userId, 'userId', 'playlistControllerShare');

    const headers: HttpHeaders = {
      ...(this.configuration.username != null &&
      this.configuration.password != null
        ? {
            Authorization: `Basic ${btoa(
              this.configuration.username + ':' + this.configuration.password
            )}`,
          }
        : undefined),
    };

    return this.request<Array<object>>(
      {
        url: '/api/playlists/{playlistId}/share/{userId}'
          .replace('{playlistId}', encodeURI(playlistId))
          .replace('{userId}', encodeURI(userId)),
        method: 'POST',
        headers,
      },
      opts?.responseOpts
    );
  }

  /**
   */
  playlistControllerUpdate({
    playlistId,
    updatePlaylistDto,
  }: PlaylistControllerUpdateRequest): Observable<Playlist>;
  playlistControllerUpdate(
    { playlistId, updatePlaylistDto }: PlaylistControllerUpdateRequest,
    opts?: OperationOpts
  ): Observable<RawAjaxResponse<Playlist>>;
  playlistControllerUpdate(
    { playlistId, updatePlaylistDto }: PlaylistControllerUpdateRequest,
    opts?: OperationOpts
  ): Observable<Playlist | RawAjaxResponse<Playlist>> {
    throwIfNullOrUndefined(
      playlistId,
      'playlistId',
      'playlistControllerUpdate'
    );
    throwIfNullOrUndefined(
      updatePlaylistDto,
      'updatePlaylistDto',
      'playlistControllerUpdate'
    );

    const headers: HttpHeaders = {
      'Content-Type': 'application/json',
      ...(this.configuration.username != null &&
      this.configuration.password != null
        ? {
            Authorization: `Basic ${btoa(
              this.configuration.username + ':' + this.configuration.password
            )}`,
          }
        : undefined),
    };

    return this.request<Playlist>(
      {
        url: '/api/playlists/{playlistId}'.replace(
          '{playlistId}',
          encodeURI(playlistId)
        ),
        method: 'PUT',
        headers,
        body: updatePlaylistDto,
      },
      opts?.responseOpts
    );
  }
}

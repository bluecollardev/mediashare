// tslint:disable
/**
 * Media Service
 * Media Service
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import {
  BaseAPI,
  HttpHeaders,
  HttpQuery,
  throwIfNullOrUndefined,
  encodeURI,
  OperationOpts,
  RawAjaxResponse,
} from '../runtime';
import {
  CreatePlaylistItemDto,
  PlaylistItemDto,
  UpdatePlaylistItemDto,
} from '../models';

export interface PlaylistItemControllerCreateRequest {
  createPlaylistItemDto: CreatePlaylistItemDto;
}

export interface PlaylistItemControllerFindAllRequest {
  text?: string;
  tags?: Array<string>;
}

export interface PlaylistItemControllerFindOneRequest {
  playlistItemId: string;
}

export interface PlaylistItemControllerRemoveRequest {
  playlistItemId: string;
}

export interface PlaylistItemControllerShareRequest {
  playlistItemId: string;
  userId: string;
  userId2: string;
}

export interface PlaylistItemControllerUpdateRequest {
  playlistItemId: string;
  updatePlaylistItemDto: UpdatePlaylistItemDto;
}

/**
 * no description
 */
export class PlaylistItemsApi extends BaseAPI {
  /**
   */
  playlistItemControllerCreate({
    createPlaylistItemDto,
  }: PlaylistItemControllerCreateRequest): Observable<object>;
  playlistItemControllerCreate(
    { createPlaylistItemDto }: PlaylistItemControllerCreateRequest,
    opts?: OperationOpts
  ): Observable<RawAjaxResponse<object>>;
  playlistItemControllerCreate(
    { createPlaylistItemDto }: PlaylistItemControllerCreateRequest,
    opts?: OperationOpts
  ): Observable<object | RawAjaxResponse<object>> {
    throwIfNullOrUndefined(
      createPlaylistItemDto,
      'createPlaylistItemDto',
      'playlistItemControllerCreate'
    );

    const headers: HttpHeaders = {
      'Content-Type': 'application/json',
      ...(this.configuration.username != null &&
      this.configuration.password != null
        ? {
            Authorization: `Basic ${btoa(
              this.configuration.username + ':' + this.configuration.password
            )}`,
          }
        : undefined),
    };

    return this.request<object>(
      {
        url: '/api/playlist-items',
        method: 'POST',
        headers,
        body: createPlaylistItemDto,
      },
      opts?.responseOpts
    );
  }

  /**
   */
  playlistItemControllerFindAll({
    text,
    tags,
  }: PlaylistItemControllerFindAllRequest): Observable<Array<PlaylistItemDto>>;
  playlistItemControllerFindAll(
    { text, tags }: PlaylistItemControllerFindAllRequest,
    opts?: OperationOpts
  ): Observable<RawAjaxResponse<Array<PlaylistItemDto>>>;
  playlistItemControllerFindAll(
    { text, tags }: PlaylistItemControllerFindAllRequest,
    opts?: OperationOpts
  ): Observable<
    Array<PlaylistItemDto> | RawAjaxResponse<Array<PlaylistItemDto>>
  > {
    const headers: HttpHeaders = {
      ...(this.configuration.username != null &&
      this.configuration.password != null
        ? {
            Authorization: `Basic ${btoa(
              this.configuration.username + ':' + this.configuration.password
            )}`,
          }
        : undefined),
    };

    const query: HttpQuery = {};

    if (text != null) {
      query['text'] = text;
    }
    if (tags != null) {
      query['tags'] = tags;
    }

    return this.request<Array<PlaylistItemDto>>(
      {
        url: '/api/playlist-items',
        method: 'GET',
        headers,
        query,
      },
      opts?.responseOpts
    );
  }

  /**
   */
  playlistItemControllerFindOne({
    playlistItemId,
  }: PlaylistItemControllerFindOneRequest): Observable<PlaylistItemDto>;
  playlistItemControllerFindOne(
    { playlistItemId }: PlaylistItemControllerFindOneRequest,
    opts?: OperationOpts
  ): Observable<RawAjaxResponse<PlaylistItemDto>>;
  playlistItemControllerFindOne(
    { playlistItemId }: PlaylistItemControllerFindOneRequest,
    opts?: OperationOpts
  ): Observable<PlaylistItemDto | RawAjaxResponse<PlaylistItemDto>> {
    throwIfNullOrUndefined(
      playlistItemId,
      'playlistItemId',
      'playlistItemControllerFindOne'
    );

    const headers: HttpHeaders = {
      ...(this.configuration.username != null &&
      this.configuration.password != null
        ? {
            Authorization: `Basic ${btoa(
              this.configuration.username + ':' + this.configuration.password
            )}`,
          }
        : undefined),
    };

    return this.request<PlaylistItemDto>(
      {
        url: '/api/playlist-items/{playlistItemId}'.replace(
          '{playlistItemId}',
          encodeURI(playlistItemId)
        ),
        method: 'GET',
        headers,
      },
      opts?.responseOpts
    );
  }

  /**
   */
  playlistItemControllerFindPopular(): Observable<Array<PlaylistItemDto>>;
  playlistItemControllerFindPopular(
    opts?: OperationOpts
  ): Observable<RawAjaxResponse<Array<PlaylistItemDto>>>;
  playlistItemControllerFindPopular(
    opts?: OperationOpts
  ): Observable<
    Array<PlaylistItemDto> | RawAjaxResponse<Array<PlaylistItemDto>>
  > {
    const headers: HttpHeaders = {
      ...(this.configuration.username != null &&
      this.configuration.password != null
        ? {
            Authorization: `Basic ${btoa(
              this.configuration.username + ':' + this.configuration.password
            )}`,
          }
        : undefined),
    };

    return this.request<Array<PlaylistItemDto>>(
      {
        url: '/api/playlist-items/popular',
        method: 'GET',
        headers,
      },
      opts?.responseOpts
    );
  }

  /**
   */
  playlistItemControllerGetVisibilities(): Observable<void>;
  playlistItemControllerGetVisibilities(
    opts?: OperationOpts
  ): Observable<void | RawAjaxResponse<void>>;
  playlistItemControllerGetVisibilities(
    opts?: OperationOpts
  ): Observable<void | RawAjaxResponse<void>> {
    return this.request<void>(
      {
        url: '/api/playlist-items/visibilities',
        method: 'GET',
      },
      opts?.responseOpts
    );
  }

  /**
   */
  playlistItemControllerRemove({
    playlistItemId,
  }: PlaylistItemControllerRemoveRequest): Observable<void>;
  playlistItemControllerRemove(
    { playlistItemId }: PlaylistItemControllerRemoveRequest,
    opts?: OperationOpts
  ): Observable<void | RawAjaxResponse<void>>;
  playlistItemControllerRemove(
    { playlistItemId }: PlaylistItemControllerRemoveRequest,
    opts?: OperationOpts
  ): Observable<void | RawAjaxResponse<void>> {
    throwIfNullOrUndefined(
      playlistItemId,
      'playlistItemId',
      'playlistItemControllerRemove'
    );

    const headers: HttpHeaders = {
      ...(this.configuration.username != null &&
      this.configuration.password != null
        ? {
            Authorization: `Basic ${btoa(
              this.configuration.username + ':' + this.configuration.password
            )}`,
          }
        : undefined),
    };

    return this.request<void>(
      {
        url: '/api/playlist-items/{playlistItemId}'.replace(
          '{playlistItemId}',
          encodeURI(playlistItemId)
        ),
        method: 'DELETE',
        headers,
      },
      opts?.responseOpts
    );
  }

  /**
   */
  playlistItemControllerShare({
    playlistItemId,
    userId,
    userId2,
  }: PlaylistItemControllerShareRequest): Observable<object>;
  playlistItemControllerShare(
    { playlistItemId, userId, userId2 }: PlaylistItemControllerShareRequest,
    opts?: OperationOpts
  ): Observable<RawAjaxResponse<object>>;
  playlistItemControllerShare(
    { playlistItemId, userId, userId2 }: PlaylistItemControllerShareRequest,
    opts?: OperationOpts
  ): Observable<object | RawAjaxResponse<object>> {
    throwIfNullOrUndefined(
      playlistItemId,
      'playlistItemId',
      'playlistItemControllerShare'
    );
    throwIfNullOrUndefined(userId, 'userId', 'playlistItemControllerShare');
    throwIfNullOrUndefined(userId2, 'userId2', 'playlistItemControllerShare');

    const headers: HttpHeaders = {
      ...(this.configuration.username != null &&
      this.configuration.password != null
        ? {
            Authorization: `Basic ${btoa(
              this.configuration.username + ':' + this.configuration.password
            )}`,
          }
        : undefined),
    };

    return this.request<object>(
      {
        url: '/api/playlist-items/{playlistItemId}/share/{userId}'
          .replace('{playlistItemId}', encodeURI(playlistItemId))
          .replace('{:userId}', encodeURI(userId))
          .replace('{userId}', encodeURI(userId2)),
        method: 'POST',
        headers,
      },
      opts?.responseOpts
    );
  }

  /**
   */
  playlistItemControllerUpdate({
    playlistItemId,
    updatePlaylistItemDto,
  }: PlaylistItemControllerUpdateRequest): Observable<object>;
  playlistItemControllerUpdate(
    {
      playlistItemId,
      updatePlaylistItemDto,
    }: PlaylistItemControllerUpdateRequest,
    opts?: OperationOpts
  ): Observable<RawAjaxResponse<object>>;
  playlistItemControllerUpdate(
    {
      playlistItemId,
      updatePlaylistItemDto,
    }: PlaylistItemControllerUpdateRequest,
    opts?: OperationOpts
  ): Observable<object | RawAjaxResponse<object>> {
    throwIfNullOrUndefined(
      playlistItemId,
      'playlistItemId',
      'playlistItemControllerUpdate'
    );
    throwIfNullOrUndefined(
      updatePlaylistItemDto,
      'updatePlaylistItemDto',
      'playlistItemControllerUpdate'
    );

    const headers: HttpHeaders = {
      'Content-Type': 'application/json',
      ...(this.configuration.username != null &&
      this.configuration.password != null
        ? {
            Authorization: `Basic ${btoa(
              this.configuration.username + ':' + this.configuration.password
            )}`,
          }
        : undefined),
    };

    return this.request<object>(
      {
        url: '/api/playlist-items/{playlistItemId}'.replace(
          '{playlistItemId}',
          encodeURI(playlistItemId)
        ),
        method: 'PUT',
        headers,
        body: updatePlaylistItemDto,
      },
      opts?.responseOpts
    );
  }
}
